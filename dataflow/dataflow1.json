{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employeedatadataset",
						"type": "DatasetReference"
					},
					"name": "EmployeeData"
				},
				{
					"dataset": {
						"referenceName": "Departmentdatadataset",
						"type": "DatasetReference"
					},
					"name": "DepartmentData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputdatasetfinal",
						"type": "DatasetReference"
					},
					"name": "outputData"
				}
			],
			"transformations": [
				{
					"name": "joinEmpDataDepData"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          depid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmployeeData",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DepartmentData",
				"DepartmentData, ModifyColumns1 join(EmployeeData@depid == DepartmentData@depid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEmpDataDepData",
				"EmployeeData derive(country = upper(country)) ~> ModifyColumns1",
				"joinEmpDataDepData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          circuitId as string,",
				"          circuitRef as string,",
				"          name as string,",
				"          location as string,",
				"          country as string,",
				"          lat as string,",
				"          lng as string,",
				"          alt as string,",
				"          url as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outputData"
			]
		}
	}
}